package com.jack.nowcoder.spring.MeiTuan.CodeM2017.fouth;

/**
 * 一颗n个点的有根树，1号点为根，相邻的两个节点之间的距离是1。
 * 树上每个节点i对应一个值k[i]，每个点都有一个颜色，初始的时候
 * 所有的点都是白色的。
 * 你需要通过一系列操作使得最终每个点变成黑色。每次操作需要选择
 * 一个节点i，i必须是白色的，然后i到根的链上(包括节点i和根)所有
 * 与节点i距离小于k[i]的点都会变成黑色，已经是黑的点继续保持黑色，
 * 问最少使用几次操作能把整棵树变黑。
 * 输入描述：
 * 第一行一个整数n(1<n<10^5)
 * 接下来n-1行，每行一个整数，依次为2号点到n号点父亲的编号。
 * 最后一行n个整数为k[i](1<k[i]<10^5)
 * 对节点3操作，导致节点2与节点3变黑
 * 对节点4操作，导致节点4变黑
 * 对节点1操作，导致节点1变黑
 * 输出描述：
 * 一个数表示最少操作次数
 * 输入
 * 4
 * 1
 * 2
 * 1
 * 1 2 2 1
 * 输出
 * 3
 */
public class P3 {
    public static void main(String[] args) {

    }
}