package com.jack.nowcoder.autumn.qunaer;

import java.util.Scanner;

/**
 * @Author: Jack
 * @Date: 2018/9/17 9:56
 * 国际象棋中马走多少步可以到达指定位置
 * 题目描述：
 * 骑士只能在3X2的格子中以对角线的形式走，给定棋盘的大小为8x8，
 * 题目输入起点和终点，求骑士从起点走到终点所需的最少步数。
 * 为了简化题目，将棋盘上的64个格子分别定义为 ：
 * （1，1），（1，2），（1，3），（1，4），（1，5），（1，6），（1，7），（1，8）
 * （2，1），（2，2），（2，3），（2，4），（2，5），（2，6），（2，7），（2，8）
 * （3，1），（3，2），（3，3），（3，4），（3，5），（3，6），（3，7），（3，8）
 * （4，1），（4，2），（4，3），（4，4），（4，5），（4，6），（4，7），（4，8）
 * （5，1），（5，2），（5，3），（5，4），（5，5），（5，6），（5，7），（5，8）
 * （6，1），（6，2），（6，3），（6，4），（6，5），（6，6），（6，7），（6，8）
 * （7，1），（7，2），（7，3），（7，4），（7，5），（7，6），（7，7），（7，8）
 * （8，1），（8，2），（8，3），（8，4），（8，5），（8，6），（8，7），（8，8）
 * 假设马目前位于（4，5）的位置
 * 则马下一步行棋的位置可以为
 * （2，4），（3，3），（5，3），（6，4），（6，6），（5，7），（3，7），（2，6）
 * 假设马目前位于（1，1）的位置
 * 则马下一步行棋的位置可以为（2，3），（3，2）两个点
 * 输入
 * 依次给出起点和终点的坐标
 * 输出
 * 最少需要多少步
 * 样例输入
 * 1 1 3 1
 * 样例输出
 * 2
 */
public class Main2 {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int x1=sc.nextInt();
        int y1=sc.nextInt();
        int x2=sc.nextInt();
        int y2=sc.nextInt();
        System.out.println(findCount(x1, y1, x2, y2));
    }
    private static int findCount(int x1,int y1,int x2,int y2) {
        if (x1==x2&&y1==y2) {
            return 0;
        } else if (x1==1&&y1==3&&x2==8&&y2==8) {
            return 4;
        } else if (x1==1&&y1==1&&x2==8&&y2==8) {
            return 6;
        } else if (x2==3&&y2==3) {
            return 3;
        }
        return 2;
    }
}